% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combine_trait_files.R, R/construct_trait_file.R
\name{construct.trait.file}
\alias{construct.trait.file}
\title{Build a gwas-ready trait file from phenotype configuration,
potentially combining across multiple datasets}
\usage{
construct.trait.file(
  phenotype.file,
  phenotype.config,
  phenotype.shared.models,
  eigenvectors,
  plink.format,
  phenotype.output,
  covariate.output,
  analysis.config,
  analysis.name,
  collapse.limit,
  id.linker
)

construct.trait.file(
  phenotype.file,
  phenotype.config,
  phenotype.shared.models,
  eigenvectors,
  plink.format,
  phenotype.output,
  covariate.output,
  analysis.config,
  analysis.name,
  collapse.limit,
  id.linker
)
}
\arguments{
\item{phenotype.file}{character vector; path to and name of
file containing phenotype information. file should be tab-delimited,
with cells quoted in "..." as needed. this is expected to be the
processed output of process.phenotypes::create.phenotype.report}

\item{phenotype.config}{character vector; path to and name of
file containing phenotype configuration data. file should be
yaml format. this file is expected to be the corresponding
configuration that led to the generation of the phenotype
matrix, and the yaml tags expected and recognized in this file
are documented with that package}

\item{phenotype.shared.models}{character vector; path to and
name of file containing shared model configuration data. file should
be yaml format. this file is expected to be the corresponding
configuration that led to the generation of the phenotype matrix,
and the yaml tags expected and recognized in this file are documented
with that package. note that this file is not required; NA
is permitted, in which case the phenotype config file itself
must explicitly specify "type:" for all variables, and never
use the "shared_model:" tag}

\item{eigenvectors}{character vector; path to and name
of file containing subject-level eigenvector data. file should
be the output format of smartpca, with a single, strange header
containing eigenvalues, one row per subject, subject ID in first
column, last column containing population labels as used for
PCA projection}

\item{plink.format}{logical; whether output format should
be plink1-style: plaintext, FID and IID in first columns,
FID set to 0 for all subjects (may be modified in future patches),
header present, one row per subject, tab delimited. currently
this is the only supported format, and the function will error
out if this is not TRUE}

\item{phenotype.output}{logical, whether output file should
contain phenotype information. some downstream applications
want model matrices presented as phenotype and covariate matrices
separately, while some want them combined}

\item{covariate.output}{logical, whether output file should
contain covariate information. some downstream applications
want model matrices presented as phenotype and covariate matrices
separately, while some want them combined}

\item{analysis.config}{character vector; path to and name of
configuration file for target downstream analysis. file should
be yaml format. recognized configuration options are specified
in the documentation for gwas-analysis-pipeline}

\item{analysis.name}{character vector; unique name of analysis
currently being processed. this should correspond to one of
the block names under the "analyses:" tag in the analysis
configuration file}

\item{collapse.limit}{integer; number of observations of a
category level above which the category is allowed to be a
distinct binary predictor in binarized categorical covariates.
many downstream models will fail if categories with extremely
low observation counts (e.g. 10 or fewer, or something like that)
are included in the regression model. levels for any categorical
predictor will be collapsed into a single combined predictor
that serves as a catchall for low count categories. note that
there is no guarantee that the combined variable will have
more observations than this limit, so it still may not converge.
in a future patch, this behavior may be modified to set subjects
falling into this catchall to NA}

\item{id.linker}{character vector; path to and name of file
specifying subject ID linking. format should be: plaintext,
two columns, with header, tab delimited, first column
contains exact ID present in phenotype file, second column
contains corresponding ID that should be reported in output.
this linker can be used to map subjects into IDs that
are present in corresponding genotype data. IDs that
are duplicated after mapping will \emph{all} be removed, to
allow compatibility with downstream tools that object
to duplicate IDs' presence. note that this argument
is optional, and NA here will be handled correctly}

\item{suppress.merge.batch}{logical; whether to prevent
batch variable injection when combining multiple datasets.
note that when this function is called on a single dataset only,
this merge batch variable is unconditionally suppressed}
}
\value{
data frame; formatted output corresponding to
the specified run parameters. exact format depends on the
specified format flags. with initial configuration, this
will be plink format with headers. output can be emitted
to file with write.table(..., row.names=FALSE, col.names=TRUE, sep="\t").
note that this output will potentially contain an additional
set of batch binary variables indicating the source of
the input data for dataset merge, if that batch variable
was enabled and the output requested covariates

data frame; formatted output corresponding to
the specified run parameters. exact format depends on the
specified format flags. with initial configuration, this
will be plink format with headers. output can be emitted
to file with write.table(..., row.names=FALSE, col.names=TRUE, sep="\t")
}
\description{
Takes in assorted phenotype configuration information
and run parameters and emits the requested formatted output as
needed for downstream tools, e.g. plink2 --glm, regenie, etc. Combines
across multiple datasets when they are each specified and contain
compatible phenotype and covariate names.

Takes in assorted phenotype configuration information
and run parameters and emits the requested formatted output as
needed for downstream tools, e.g. plink2 --glm, regenie, etc.
}
\details{
This package is designed as a downstream supplement
to process.phenotypes, in that it receives output from that
tool and same-format configuration information to create
model matrices. As initially configured, this function receives
information managed by Snakemake. Snakemake should guarantee
some characteristics of the data (e.g. files exist when specified),
but for sanity reasons all checks will be repeated. In particular,
it is possible that the Snakemake object that's originally providing
this information may not have the requested entries, in which case
some things could be unexpectedly NULL.

This is a utility function to combine data across multiple datasets,
provided that the datasets have identically named phenotypes
and covariates. Optionally, an additional batch variable
is added to flag the contributing datasets as possible
sources of batch effects.

This package is designed as a downstream supplement
to process.phenotypes, in that it receives output from that
tool and same-format configuration information to create
model matrices. As initially configured, this function receives
information managed by Snakemake. Snakemake should guarantee
some characteristics of the data (e.g. files exist when specified),
but for sanity reasons all checks will be repeated. In particular,
it is possible that the Snakemake object that's originally providing
this information may not have the requested entries, in which case
some things could be unexpectedly NULL.
}
